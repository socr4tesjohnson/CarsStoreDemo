#pragma checksum "C:\Users\deric\source\repos\CarsStoreDemo\PerksDemo\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "283a72b4616cfdb2bbb93c0f4901e53e0a24c8c7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\deric\source\repos\CarsStoreDemo\PerksDemo\Views\_ViewImports.cshtml"
using CarDemo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\deric\source\repos\CarsStoreDemo\PerksDemo\Views\_ViewImports.cshtml"
using CarDemo.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"283a72b4616cfdb2bbb93c0f4901e53e0a24c8c7", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"607a64024f8cfe0a1c9ee799c4f8569de2de0c9a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\deric\source\repos\CarsStoreDemo\PerksDemo\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Car Demo";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n    <div id=\"app\">\r\n        <h1>Cars</h1>\r\n\r\n        <b-button ");
            WriteLiteral("@click=\"openAddCarModal()\">Add Car</b-button>\r\n        <b-modal id=\"update-car-modal\" :title=\"this.carToUpdate.action + \' CAR\'\" ");
            WriteLiteral("@ok=\"saveCar\" >\r\n            <div>\r\n                <b-form ref=\"form\" ");
            WriteLiteral(@"@submit.stop.prevent=""saveCar"" >
                    <b-form-group id=""input-group-1""
                                  label=""Description:""
                                  label-for=""input-1""
                                  invalid-feedback=""Description is required"">
                        <b-form-input id=""input-1""
                                      v-model=""carToUpdate.description""
                                      required
                                      :state=""descriptionState""
                                      placeholder=""Enter Description""></b-form-input>
                        <b-form-valid-feedback>Description is required</b-form-valid-feedback>
                    </b-form-group>

                    <b-form-group id=""input-group-2"" label=""Year:"" label-for=""input-2"" invalid-feedback=""Year is required"">
                        <b-form-input id=""input-2""
                                      type=""number""
                                      v-model.number=""ca");
            WriteLiteral(@"rToUpdate.year""
                                      required
                                      :state=""yearState""
                                      placeholder=""Enter year""
                                      ></b-form-input>
                    </b-form-group>

                    <b-form-group id=""input-group-3"" label=""Color:"" label-for=""input-3"" invalid-feedback=""Color is required"">
                        <b-form-select id=""input-3""
                                       v-model=""carToUpdate.color""
                                       :options=""colors""
                                       required
                                       :state=""colorState""></b-form-select>
                    </b-form-group>

                    <b-form-group id=""input-group-4"" label=""Make:"" label-for=""input-4"" invalid-feedback=""Make is required"">
                        <b-form-select id=""input-4""
                                       v-model=""carToUpdate.make""
                          ");
            WriteLiteral(@"             :options=""makes""
                                       required
                                       :state=""makeState""></b-form-select>
                    </b-form-group>

                    <b-form-group id=""input-group-5"" label=""Type:"" label-for=""input-5"" invalid-feedback=""Type is required"">
                        <b-form-select id=""input-5""
                                       v-model=""carToUpdate.type""
                                       :options=""types""
                                       required
                                       :state=""typeState""></b-form-select>
                    </b-form-group>

                </b-form>
                
            </div>
        </b-modal>

        <div>
            <b-input-group size=""sm"">
                <b-form-input v-model=""filter""
                              type=""search""
                              id=""filterInput""
                              placeholder=""Type to Search""></b-form-input>
     ");
            WriteLiteral("           <b-input-group-append>\r\n                    <b-button :disabled=\"!filter\" ");
            WriteLiteral(@"@click=""filter = ''"">Clear</b-button>
                </b-input-group-append>
            </b-input-group>

            <b-table striped hover :fields=""fields"" :items=""cars"" :sort-by.sync=""sortBy"" :sort-desc.sync=""sortDesc"" :filter=""filter"">
                <template v-slot:cell(delete)=""data"">
                    <b-button ");
            WriteLiteral("@click=\"deleteCar(data.item)\"> <b-icon-trash></b-icon-trash></b-button>\r\n                </template>>\r\n\r\n                <template v-slot:cell(edit)=\"data\">\r\n                   \r\n                    <b-button ");
            WriteLiteral(@"@click=""openUpdateCarModal(data.item)""> <b-icon-pencil></b-icon-pencil></b-button>
                </template>>

                <template v-slot:cell(color)=""data"">
                    {{ data.item.color.description }}
                </template>
                <template v-slot:cell(make)=""data"">
                    {{ data.item.make.description }}
                </template>
                <template v-slot:cell(type)=""data"">
                    {{ data.item.type.description }}
                </template>
            </b-table>
        </div>


    </div>

<script type=""text/javascript"">

    new Vue({
        el: '#app',

        data: {
            fields: [
                { key: 'delete', thStyle: {'width': '10px'}, sortable: false},
                { key: 'edit', thStyle: {'width': '10px'}, sortable: false},
                { key: 'description', sortable: true},
                { key: 'year', sortable: true},
                { key: 'color', sortable: true},
              ");
            WriteLiteral(@"  { key: 'make', sortable: true},
                { key: 'type', sortable: true}
            ],
            cars: [],
            colors: [],
            types: [],
            makes: [],
            
            filter: null,
            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',

            descriptionState: null,
            yearState: null,
            colorState: null,
            makeState: null,
            typeState: null,

            carToUpdate: {},

        },
        mounted() {
            fetch(""/Home/LoadCars"", {
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json().then((data) => {
                this.cars = data
            }));

            fetch(""/Home/LoadCarColors"", {
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json().then((data) =>");
            WriteLiteral(@" {

                this.colors = data.map(color => {
                    return {
                        value: color, text: color.description
                    }
                })
                console.log(this.colors)
            }));

            fetch(""/Home/LoadCarMakes"", {
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json().then((data) => {
                this.makes = data.map(make => {
                    return {
                        value: make, text: make.description
                    }
                })
            }));

            fetch(""/Home/LoadCarTypes"", {
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json().then((data) => {
                this.types = data.map(type => {
                    return {
                        value: type, text: type.description
  ");
            WriteLiteral(@"                  }
                })
            }));

        },
        methods: {
            checkFormValidity() {
                const valid = this.$refs.form.checkValidity()
                this.descriptionState = valid
                this.yearState = valid
                this.colorState = valid
                this.makeState = valid
                this.typeState = valid
                return valid
            },
            clearUpdateCar() {
                this.carToUpdate = {};
            },
            openAddCarModal() {
                this.carToUpdate = { action: 'ADD' };
                this.$bvModal.show('update-car-modal');
            },
            openUpdateCarModal(carToUpdate) {
                this.carToUpdate = carToUpdate;
                this.carToUpdate.action = 'UPDATE';
                this.$bvModal.show('update-car-modal');
            },
            saveCar(evt) {
                evt.preventDefault()

                if (!this.checkFormValid");
            WriteLiteral(@"ity()) {
                    return;
                }

                if (this.carToUpdate.action === 'ADD') {
                    this.addCar();
                }
                else {
                    this.updateCar();
                }
            },
            addCar() {
                console.log(""Adding"" + JSON.stringify(this.carToUpdate))
                fetch(""/Home/AddCar"", {
                    method: 'POST',
                    headers: { 
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }, 
                    body: JSON.stringify(this.carToUpdate)
                }).then(response => response.json().then((data) => {
                    this.cars.push(data)
                    this.$bvModal.hide('update-car-modal')
                }))
            },
            updateCar() {
                console.log(""Updating"" + JSON.stringify(this.carToUpdate))
                fetch(""/Home/Upd");
            WriteLiteral(@"ateCar"", {
                    method: 'POST',
                    headers: { 
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }, 
                    body: JSON.stringify(this.carToUpdate)
                }).then(response => response.json().then((data) => {

                    let foundCar = this.cars.find((car) => { return car.id === this.carToUpdate.id });

                    foundCar = data;

                    this.$bvModal.hide('update-car-modal') 
                }))
            },
            deleteCar(cartoDelete) {
                console.log(""Deleting"" + JSON.stringify(cartoDelete))
                fetch(""/Home/DeleteCar"", {
                    method: 'POST',
                    headers: { 
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }, 
                    body: JSON.stringify(cartoDelete)
        ");
            WriteLiteral("        }).then(() => {\r\n                    this.cars = this.cars.filter((car) => { return car.id !== cartoDelete.id });\r\n                })\r\n            },\r\n        }\r\n\r\n\r\n      \r\n    })\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
